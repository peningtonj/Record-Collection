name: Build Multi-Platform Desktop Apps

on:
  # Only build on releases and manual triggers
  push:
    tags:
      - 'v*'  # Only build when you create version tags like v1.0.0
  pull_request:
    branches: [ main ]  # Build on PRs to test before merging
  workflow_dispatch: # Allow manual triggering from GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build Windows MSI
        run: ./gradlew packageMsi

      - name: Build Windows Distributable
        run: ./gradlew createDistributable

      - name: List build outputs (debug)
        run: |
          echo "Contents of build directory:"
          find build -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" 2>/dev/null || echo "No installers found"
          echo "Full build structure:"
          ls -la build/ || echo "No build directory"
        shell: bash

      - name: Upload Windows MSI
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: composeApp/build/compose/binaries/main/msi/
          retention-days: 30

      - name: Upload Windows Distributable
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: composeApp/build/compose/binaries/main/app/
          retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build macOS DMG
        run: ./gradlew packageDmg

      - name: Build macOS Distributable
        run: ./gradlew createDistributable

      - name: List build outputs (debug)
        run: |
          echo "Contents of build directory:"
          find build -name "*.dmg" -o -name "*.app" 2>/dev/null || echo "No macOS artifacts found"
          echo "Full build structure:"
          ls -la build/ || echo "No build directory"

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: composeApp/build/compose/binaries/main/dmg/
          retention-days: 30

      - name: Upload macOS Distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-portable
          path: composeApp/build/compose/binaries/main/app/
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Linux DEB
        run: ./gradlew packageDeb

      - name: Build Linux Distributable
        run: ./gradlew createDistributable

      - name: List build outputs (debug)
        run: |
          echo "Contents of build directory:"
          find build -name "*.deb" 2>/dev/null || echo "No DEB files found"
          echo "Full build structure:"
          ls -la build/ || echo "No build directory"

      - name: Upload Linux DEB
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: composeApp/build/compose/binaries/main/deb/
          retention-days: 30

      - name: Upload Linux Distributable
        uses: actions/upload-artifact@v4
        with:
          name: linux-portable
          path: composeApp/build/compose/binaries/main/app/
          retention-days: 30

  # Create a release when you push a tag
  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts (debug)
        run: |
          echo "Downloaded artifacts structure:"
          ls -la
          echo "Contents of each artifact folder:"
          for dir in */; do
            echo "=== $dir ==="
            ls -la "$dir" || echo "Empty or no access"
          done

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Copy MSI files
          find windows-msi -name "*.msi" -exec cp {} release-files/ \; 2>/dev/null || echo "No MSI files found"
          
          # Copy DMG files  
          find macos-dmg -name "*.dmg" -exec cp {} release-files/ \; 2>/dev/null || echo "No DMG files found"
          
          # Copy DEB files
          find linux-deb -name "*.deb" -exec cp {} release-files/ \; 2>/dev/null || echo "No DEB files found"
          
          # Create portable archives
          if [ -d "windows-portable" ]; then
            cd windows-portable
            zip -r ../release-files/windows-portable.zip . 2>/dev/null || echo "Failed to create Windows portable zip"
            cd ..
          fi
          
          if [ -d "macos-portable" ]; then
            cd macos-portable  
            tar -czf ../release-files/macos-portable.tar.gz . 2>/dev/null || echo "Failed to create macOS portable archive"
            cd ..
          fi
          
          if [ -d "linux-portable" ]; then
            cd linux-portable
            tar -czf ../release-files/linux-portable.tar.gz . 2>/dev/null || echo "Failed to create Linux portable archive"
            cd ..
          fi
          
          echo "Release files prepared:"
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}